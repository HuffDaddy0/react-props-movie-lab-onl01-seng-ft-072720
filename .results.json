{
  "stats": {
    "suites": 4,
    "tests": 14,
    "passes": 10,
    "pending": 0,
    "failures": 4,
    "start": "2020-11-23T19:27:50.885Z",
    "end": "2020-11-23T19:27:51.112Z",
    "duration": 227
  },
  "tests": [
    {
      "title": "renders at least one <MovieCard /> component",
      "fullTitle": "<MovieShowcase /> renders at least one <MovieCard /> component",
      "duration": 8,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "renders 9 <MovieCard /> components",
      "fullTitle": "<MovieShowcase /> renders 9 <MovieCard /> components",
      "duration": 5,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "passes all 4 props to every component",
      "fullTitle": "<MovieShowcase /> passes all 4 props to every component",
      "duration": 3,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "has generated the correct prop values for the first movie",
      "fullTitle": "<MovieShowcase /> has generated the correct prop values for the first movie",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "has generated the correct prop values for the last movie",
      "fullTitle": "<MovieShowcase /> has generated the correct prop values for the last movie",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "assigns a default prop of 'Unknown' for the title prop",
      "fullTitle": "<MovieCard /> assigns a default prop of 'Unknown' for the title prop",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "assigns a default prop of null for the IMDBRating prop",
      "fullTitle": "<MovieCard /> assigns a default prop of null for the IMDBRating prop",
      "duration": 2,
      "currentRetry": 0,
      "err": {
        "message": "expected undefined to equal null",
        "showDiff": true,
        "expected": null,
        "stack": "AssertionError: expected undefined to equal null\n    at Context.<anonymous> (test/1-MovieCard.test.js:19:50)"
      }
    },
    {
      "title": "assigns a default prop of ['No Genre(s) Found'] for the genres prop",
      "fullTitle": "<MovieCard /> assigns a default prop of ['No Genre(s) Found'] for the genres prop",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "assigns a default prop of 'default' for the poster prop",
      "fullTitle": "<MovieCard /> assigns a default prop of 'default' for the poster prop",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "uses the poster prop as a background image, rendering only the necessary HTML",
      "fullTitle": "<CardFront /> uses the poster prop as a background image, rendering only the necessary HTML",
      "duration": 18,
      "currentRetry": 0,
      "err": {
        "message": "expected '<div class=\"card-front\" style=\"background-image:url(this.props.poster)\"></div>' to equal '<div class=\"card-front\" style=\"background-image:url(you spin me right round)\"></div>'",
        "showDiff": true,
        "actual": "<div class=\"card-front\" style=\"background-image:url(this.props.poster)\"></div>",
        "expected": "<div class=\"card-front\" style=\"background-image:url(you spin me right round)\"></div>",
        "stack": "AssertionError: expected '<div class=\"card-front\" style=\"background-image:url(this.props.poster)\"></div>' to equal '<div class=\"card-front\" style=\"background-image:url(you spin me right round)\"></div>'\n    at Context.<anonymous> (test/2-CardFront.test.js:15:33)"
      }
    },
    {
      "title": "correctly renders the title prop",
      "fullTitle": "<CardBack /> correctly renders the title prop",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "correctly renders the genres prop as comma seperated strings",
      "fullTitle": "<CardBack /> correctly renders the genres prop as comma seperated strings",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "renders 'No Rating Found' in an <h4> if the IMDBRating prop is null",
      "fullTitle": "<CardBack /> renders 'No Rating Found' in an <h4> if the IMDBRating prop is null",
      "duration": 18,
      "currentRetry": 0,
      "err": {
        "message": "expected '\\'no rating data\\'' to equal 'no rating found'",
        "showDiff": true,
        "actual": "'no rating data'",
        "expected": "no rating found",
        "stack": "AssertionError: expected '\\'no rating data\\'' to equal 'no rating found'\n    at Context.<anonymous> (test/3-CardBack.test.js:33:59)"
      }
    },
    {
      "title": "renders an <img> tag if the IMDBRating prop is valid",
      "fullTitle": "<CardBack /> renders an <img> tag if the IMDBRating prop is valid",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "message": "expected false to equal true",
        "showDiff": true,
        "actual": "false",
        "expected": "true",
        "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (test/3-CardBack.test.js:37:46)"
      }
    }
  ],
  "pending": [],
  "failures": [
    {
      "title": "assigns a default prop of null for the IMDBRating prop",
      "fullTitle": "<MovieCard /> assigns a default prop of null for the IMDBRating prop",
      "duration": 2,
      "currentRetry": 0,
      "err": {
        "message": "expected undefined to equal null",
        "showDiff": true,
        "expected": null,
        "stack": "AssertionError: expected undefined to equal null\n    at Context.<anonymous> (test/1-MovieCard.test.js:19:50)"
      }
    },
    {
      "title": "uses the poster prop as a background image, rendering only the necessary HTML",
      "fullTitle": "<CardFront /> uses the poster prop as a background image, rendering only the necessary HTML",
      "duration": 18,
      "currentRetry": 0,
      "err": {
        "message": "expected '<div class=\"card-front\" style=\"background-image:url(this.props.poster)\"></div>' to equal '<div class=\"card-front\" style=\"background-image:url(you spin me right round)\"></div>'",
        "showDiff": true,
        "actual": "<div class=\"card-front\" style=\"background-image:url(this.props.poster)\"></div>",
        "expected": "<div class=\"card-front\" style=\"background-image:url(you spin me right round)\"></div>",
        "stack": "AssertionError: expected '<div class=\"card-front\" style=\"background-image:url(this.props.poster)\"></div>' to equal '<div class=\"card-front\" style=\"background-image:url(you spin me right round)\"></div>'\n    at Context.<anonymous> (test/2-CardFront.test.js:15:33)"
      }
    },
    {
      "title": "renders 'No Rating Found' in an <h4> if the IMDBRating prop is null",
      "fullTitle": "<CardBack /> renders 'No Rating Found' in an <h4> if the IMDBRating prop is null",
      "duration": 18,
      "currentRetry": 0,
      "err": {
        "message": "expected '\\'no rating data\\'' to equal 'no rating found'",
        "showDiff": true,
        "actual": "'no rating data'",
        "expected": "no rating found",
        "stack": "AssertionError: expected '\\'no rating data\\'' to equal 'no rating found'\n    at Context.<anonymous> (test/3-CardBack.test.js:33:59)"
      }
    },
    {
      "title": "renders an <img> tag if the IMDBRating prop is valid",
      "fullTitle": "<CardBack /> renders an <img> tag if the IMDBRating prop is valid",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "message": "expected false to equal true",
        "showDiff": true,
        "actual": "false",
        "expected": "true",
        "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (test/3-CardBack.test.js:37:46)"
      }
    }
  ],
  "passes": [
    {
      "title": "renders at least one <MovieCard /> component",
      "fullTitle": "<MovieShowcase /> renders at least one <MovieCard /> component",
      "duration": 8,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "renders 9 <MovieCard /> components",
      "fullTitle": "<MovieShowcase /> renders 9 <MovieCard /> components",
      "duration": 5,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "passes all 4 props to every component",
      "fullTitle": "<MovieShowcase /> passes all 4 props to every component",
      "duration": 3,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "has generated the correct prop values for the first movie",
      "fullTitle": "<MovieShowcase /> has generated the correct prop values for the first movie",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "has generated the correct prop values for the last movie",
      "fullTitle": "<MovieShowcase /> has generated the correct prop values for the last movie",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "assigns a default prop of 'Unknown' for the title prop",
      "fullTitle": "<MovieCard /> assigns a default prop of 'Unknown' for the title prop",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "assigns a default prop of ['No Genre(s) Found'] for the genres prop",
      "fullTitle": "<MovieCard /> assigns a default prop of ['No Genre(s) Found'] for the genres prop",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "assigns a default prop of 'default' for the poster prop",
      "fullTitle": "<MovieCard /> assigns a default prop of 'default' for the poster prop",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "correctly renders the title prop",
      "fullTitle": "<CardBack /> correctly renders the title prop",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "correctly renders the genres prop as comma seperated strings",
      "fullTitle": "<CardBack /> correctly renders the genres prop as comma seperated strings",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    }
  ]
}